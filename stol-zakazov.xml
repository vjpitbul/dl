<?xml version="1.0" encoding="utf-8"?>
<dleplugin>
	<name>Стол заказов</name>
	<description>Авторы: @thecoooler и @kod_black</description>
	<icon></icon>
	<version>2.0.0</version>
	<dleversion>16.0</dleversion>
	<versioncompare>==</versioncompare>
	<upgradeurl>https://t.me/thecoooler</upgradeurl>
	<filedelete>0</filedelete>
	<needplugin></needplugin>
	<mnotice>0</mnotice>
	<mysqlinstall><![CDATA[CREATE TABLE IF NOT EXISTS `{prefix}_orderdesc` (
  `id` INT( 11 ) NOT NULL AUTO_INCREMENT ,
  `title` VARCHAR( 255 ) NOT NULL ,
  `orig_title` VARCHAR( 255 ) NOT NULL ,
  `link` VARCHAR( 255 ) NOT NULL ,
  `descr` TEXT NOT NULL ,
  `category` VARCHAR( 2 ) NOT NULL ,
  `autor` VARCHAR( 40 ) NOT NULL ,
  `date` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
  `year` VARCHAR( 4 ) NOT NULL ,
  `status` VARCHAR( 4 ) NOT NULL DEFAULT 'wait',
  `comment` TEXT NOT NULL ,
  `rating` SMALLINT ( 3 ) NOT NULL DEFAULT '0' ,
  PRIMARY KEY (`id`) ,
  FULLTEXT KEY `title` (`title`,`orig_title`)
) ENGINE=MyISAM;

CREATE TABLE IF NOT EXISTS `{prefix}_orderdesc_ratelog` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `order_id` int(11) NOT NULL,
  `ip` varchar(16) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `order_id` (`order_id`)
) ENGINE=MyISAM;

CREATE TABLE IF NOT EXISTS `{prefix}_orderdesc_category` (
  `cat_id` int NOT NULL AUTO_INCREMENT PRIMARY KEY,
  `cat_name` varchar(100) NOT NULL
);]]></mysqlinstall>
	<mysqlupgrade><![CDATA[]]></mysqlupgrade>
	<mysqlenable><![CDATA[INSERT IGNORE INTO `{prefix}_admin_sections` (`name`, `title`, `descr`, `icon`, `allow_groups`) VALUES ('orderdesc', 'OrderDesc', 'Стол заказов', '', '1');]]></mysqlenable>
	<mysqldisable><![CDATA[DELETE FROM `{prefix}_admin_sections` WHERE `name` = 'orderdesc';]]></mysqldisable>
	<mysqldelete><![CDATA[DELETE FROM `{prefix}_admin_sections` WHERE `name` = 'orderdesc';]]></mysqldelete>
	<phpinstall><![CDATA[]]></phpinstall>
	<phpupgrade><![CDATA[]]></phpupgrade>
	<phpenable><![CDATA[]]></phpenable>
	<phpdisable><![CDATA[]]></phpdisable>
	<phpdelete><![CDATA[]]></phpdelete>
	<notice><![CDATA[]]></notice>
	<file name="engine/init.php">
		<operation action="after">
			<searchcode><![CDATA[date_default_timezone_set ( $config['date_adjust'] );]]></searchcode>
			<replacecode><![CDATA[require_once \DLEPlugins::Check(ENGINE_DIR . "/iCooLER/OrderDesc/init.php");
require_once DLEPlugins::Check(ENGINE_DIR . '/iCooLER/OrderDesc/routes.php');]]></replacecode>
			<enabled>1</enabled>
		</operation>
	</file>
	<file name="engine/engine.php">
		<operation action="after">
			<searchcode><![CDATA[switch ( $do ) {]]></searchcode>
			<replacecode><![CDATA[	case "orderdesc":
    require DLEPlugins::Check(ENGINE_DIR . '/iCooLER/OrderDesc/site.php');
    break;]]></replacecode>
			<enabled>1</enabled>
		</operation>
		<operation action="after">
			<searchcode><![CDATA[elseif ($do == 'pm') $nam_e = $lang['title_pm'];]]></searchcode>
			<replacecode><![CDATA[elseif ($do == 'orderdesc') $nam_e = "Стол заказов";]]></replacecode>
			<enabled>1</enabled>
		</operation>
	</file>
	<file name="engine/modules/main.php">
		<operation action="before">
			<searchcode><![CDATA[echo $tpl->result['main'];]]></searchcode>
			<replacecode><![CDATA[$tpl->result["main"] = str_replace("{orderdesc-url}", "/{$orderDescUrl}", $tpl->result["main"]);]]></replacecode>
			<enabled>1</enabled>
		</operation>
	</file>
	<file name="engine/iCooLER/OrderDesc/routes.php">
		<operation action="create">
			<replacecode><![CDATA[<?php defined('DATALIFEENGINE') || die('Access denied!');

$orderDescUrl = empty($order_config["url"]) ? "ordedesc" : $order_config["url"];

$request = substr(parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH), 1);
$routes = [
  '^' . $orderDescUrl . '/delete/([0-9]+)(/?)+$' => 'do=orderdesc&action=del&id=$1',
  '^' . $orderDescUrl . '/edit/([0-9]+)(/?)+$' => 'do=orderdesc&action=edit&id=$1',
  '^' . $orderDescUrl . '/add(/?)+$' => 'do=orderdesc&action=add',
  '^' . $orderDescUrl . '(/?)+$' => 'do=orderdesc',
];

foreach ($routes as $path => $query) {
  if (preg_match("'{$path}'is", $request, $match)) {
    foreach ($match as $index => $value) {
      $query = str_replace('$' . $index, $value, $query);
    }
    parse_str($query, $current);
    if (is_array($current)) {
      $_REQUEST = $_GET = $current;
    }
    break;
  }
}
]]></replacecode>
			<enabled>1</enabled>
		</operation>
	</file>
	<file name="engine/ajax/orderdesc.php">
		<operation action="create">
			<replacecode><![CDATA[<?php defined('DATALIFEENGINE') || die('Access denied!');

/*
=====================================================
 Олег Александрович a.k.a. Sander
-----------------------------------------------------
 http://nfhelp.ru/
-----------------------------------------------------
 Copyright (c) 2009-2012
=====================================================
*/

require DLEPlugins::Check(ENGINE_DIR . "/iCooLER/OrderDesc/init.php");

$action = isset($_REQUEST["action"]) ? $_REQUEST["action"] : "";

if ($action == "relates") {
  if (!$is_logged and !$order_config['allow_guest']) die("error");

  $title = $db->safesql(trim(convert_unicode($_POST['title'], $config['charset'])));
  if (dle_strlen($title, $config['charset']) < 3) die();

  $buffer = "";
  $db->query("SELECT title, orig_title, year, link, status,  MATCH (title, orig_title) AGAINST ('$title') as score FROM " . PREFIX . "_orderdesc WHERE title LIKE '%{$title}%' OR MATCH (title, orig_title) AGAINST ('{$title}') ORDER BY score DESC, date DESC LIMIT 5");
  while ($row = $db->get_row()) {
    $year = intval($row['year']);
    if ($row['orig_title']) $row['title'] .= " / " . $row['orig_title'];
    $row['title'] = stripslashes($row['title']);
    if ($row['link']) $row['title'] = "<a href=\"{$row['link']}\" target=\"_blank\">{$row['title']}</a>";
    if ($year > 0) $row['title'] = "<b>{$year}</b> - {$row['title']}";
    if ($row['status'] == 'done') $row['status'] = "Готово";
    elseif ($row['status'] == 'deny') $row['status'] = "Отказано";
    elseif ($row['status'] == 'work') $row['status'] = "В работе";
    else $row['status'] = "Ожидает";
    $buffer .= "<li><span title=\"Статус заявки\">{$row['status']}</span>{$row['title']}</li>";
  }
  $db->close();
  @header("Content-type: text/html; charset=" . $config['charset']);
  if (!$buffer) $buffer = "<li>Совпадений не найдено</li>";
  echo $buffer;
} elseif ($action == "rating") {
  $order = intval($_POST['order']);
  if ($order < 1) die("Hacking attempt!");

  @header("Content-type: text/html; charset=" . $config['charset']);

  if (in_array($member_id['user_group'], $order_config['allow2vote'])) {
    $row = $db->super_query("SELECT order_id FROM " . PREFIX . "_orderdesc_ratelog where order_id={$order} AND ip='{$_IP}'");
    if (!$row['order_id']) {
      $db->query("UPDATE " . PREFIX . "_orderdesc SET rating=rating+1 WHERE id={$order}");
      $db->query("INSERT INTO " . PREFIX . "_orderdesc_ratelog (order_id, ip) values ('$order', '$_IP')");
    } else die("{\"msg\": \"Вы уже голосовали\"}");
  } else die("{\"msg\": \"Вы не можете голосовать\"}");

  $row = $db->super_query("SELECT rating FROM " . PREFIX . "_orderdesc WHERE id={$order}");

  echo "{\"rating\":\"{$row['rating']}\",\"msg\":\"\"}";
}
]]></replacecode>
			<enabled>1</enabled>
		</operation>
	</file>
	<file name="engine/iCooLER/OrderDesc/init.php">
		<operation action="create">
			<replacecode><![CDATA[<?php

use iCooLER\OrderDesc\Classes\OrderDesc;

defined('DATALIFEENGINE') || die('Access denied!');

require_once \DLEPlugins::Check(ENGINE_DIR . "/iCooLER/OrderDesc/loader.php");

$order_cat_list = OrderDesc::categories();
$order_config = OrderDesc::config();]]></replacecode>
			<enabled>1</enabled>
		</operation>
	</file>
	<file name="engine/iCooLER/OrderDesc/loader.php">
		<operation action="create">
			<replacecode><![CDATA[<?php

namespace iCooLER\OrderDesc;

defined('DATALIFEENGINE') || die('Access denied!');

spl_autoload_register(function ($name) {
  if (strpos($name, __NAMESPACE__ . '\\') !== 0) return;
  $file = str_replace('\\', '/', $name);
  @require_once \DLEPlugins::Check(ENGINE_DIR . '/' . $file . '.php');
});
]]></replacecode>
			<enabled>1</enabled>
		</operation>
	</file>
	<file name="engine/inc/orderdesc.php">
		<operation action="create">
			<replacecode><![CDATA[<?php

use iCooLER\OrderDesc\Classes\Admin;
use iCooLER\OrderDesc\Classes\Response;
use iCooLER\OrderDesc\Classes\Router;
use iCooLER\OrderDesc\Forms\ConfigForm;
use iCooLER\OrderDesc\Forms\ListForm;
use iCooLER\OrderDesc\Services\CategoryService;

defined('DATALIFEENGINE') || die('Access denied!');

require_once \DLEPlugins::Check(ENGINE_DIR . "/iCooLER/OrderDesc/loader.php");

function saveConfig($path, $config)
{
  file_put_contents(
    $path,
    '<?php return ' . var_export($config, true) . ';',
    LOCK_EX
  );
}

$router = new Router();

$router->addRoute("GET", "/", function () {
  return Response::html(Admin::render("index", [
    "items" => [
      [
        "url" => Admin::url("/config"),
        "icon" => "tools",
        "label" => "Настройки",
        "caption" => "Управление настройки модуля"
      ],
      [
        "url" => Admin::url("/categories"),
        "icon" => "cats",
        "label" => "Категории",
        "caption" => "Управление категориями"
      ]
    ]
  ]));
});

$router->addRoute(["GET", "POST"], "/config", function () {
  $options = @include ENGINE_DIR . '/data/OrderDesc.config.php';
  if (!is_array($options)) $options = [];

  $form = new ConfigForm();
  $form->setData($options);

  if ($_SERVER["REQUEST_METHOD"] == "POST" && $form->setData($_POST, 1)->validate()) {
    $options = $form->getData();
    saveConfig(ENGINE_DIR . '/data/OrderDesc.config.php', $options);
    Admin::addMessage("success", "Выполнено!", "Настройки успешно сохранены");
    return Response::redirect(Admin::url("/config"));
  }

  return Response::html(Admin::render("form", [
    "title" => "Настройки",
    "button" => "Сохранить",
    "form" => $form
  ]));
});

$router->addRoute("GET", "/categories", function () {
  $items = CategoryService::all();

  return Response::html(Admin::render("categories", [
    "items" => $items
  ]));
});

$router->addRoute(["GET", "POST"], "/categories/create", function () {
  $form = new ListForm();

  if ($_SERVER["REQUEST_METHOD"] == "POST" && $form->setData($_POST, 1)->validate()) {
    CategoryService::add($form->getData());
    @unlink(ENGINE_DIR . "/cache/system/orderdesc_category.php");
    return Response::redirect(Admin::url("/categories"));
  }

  return Response::html(Admin::render("form", [
    "title" => "Добавить раздел",
    "button" => "Добавить",
    "form" => $form
  ]));
});

$router->addRoute(["GET", "POST"], "/categories/edit/{int:id}", function ($id) {
  $row = CategoryService::byId($id);

  if (!$row) {
    return Response::redirect(Admin::url("/categories"));
  }

  $form = new ListForm();

  if ($_SERVER["REQUEST_METHOD"] == "POST" && $form->setData($_POST, 1)->validate()) {
    CategoryService::change($id, $form->getData());
    @unlink(ENGINE_DIR . "/cache/system/orderdesc_category.php");
    return Response::redirect(Admin::url("/categories"));
  }

  $form->setData($row)->setData($_POST, 1);

  return Response::html(Admin::render("form", [
    "title" => "Редактировать раздел",
    "button" => "Сохранить",
    "form" => $form
  ]));
});

$router->route(
  $_SERVER["REQUEST_METHOD"],
  isset($_REQUEST["endpoint"]) ? $_REQUEST["endpoint"] : "/"
);
]]></replacecode>
			<enabled>1</enabled>
		</operation>
	</file>
	<file name="engine/iCooLER/OrderDesc/site.php">
		<operation action="create">
			<replacecode><![CDATA[<?php defined('DATALIFEENGINE') || die('Access denied!');

/*
=====================================================
 Олег Александрович a.k.a. Sander
-----------------------------------------------------
 http://nfhelp.ru/
-----------------------------------------------------
 Copyright (c) 2009-2012
=====================================================
*/

require DLEPlugins::Check(ENGINE_DIR . "/iCooLER/OrderDesc/init.php");

function getParserFilterInstance()
{
  include_once(DLEPlugins::Check(ENGINE_DIR . '/classes/htmlpurifier/HTMLPurifier.standalone.php'));
  include_once(DLEPlugins::Check(ENGINE_DIR . '/classes/parse.class.php'));

  return new \ParseFilter(array(), array(), 1, 1);
}

function orderDescRenderForm($action, $data = [])
{
  global $tpl, $order_cat_list;
  $parse = getParserFilterInstance();
  $tpl->load_template('modules/orderdesc/orderdesc_form.tpl');
  foreach ([
    "id", "title", "orig_title", "year", "descr",
    "autor", "date", "comment", "link", "status", "category"
  ] as $k) {
    if (!isset($data[$k])) {
      $data[$k] = "";
    }
  }
  $tpl->set("{id}", isset($data["id"]));
  $tpl->set("{title}", stripslashes($data['title']));
  $tpl->set("{orig_title}", stripslashes($data['orig_title']));
  $tpl->set("{year}", $data['year']);
  $tpl->set("{descr}", $parse->decodeBBCodes($data['descr'], false));
  $tpl->set("{autor}", stripslashes($data['autor']));
  $tpl->set("{date}", $data['date']);
  $tpl->set("{comment}", stripslashes($data['comment']));
  $tpl->set("{link}", stripslashes($data['link']));
  $status = array();
  $status[$data['status']] = " checked";
  $tpl->set("{status}", "
  <div class=\"checkbox form-check switch mt-2 mb-4 d-flex flex-wrap align-items-center gap-2\"><input type=\"checkbox\" name=\"status\" id=\"wait\" value=\"0\"{$status['wait']}><label for=\"wait\">Ожидает</label><input type=\"checkbox\" name=\"status\" id=\"work\" value=\"1\"{$status['work']}><label for=\"work\">В работе</label><input type=\"checkbox\" name=\"status\" id=\"done\" value=\"2\"{$status['done']}><label for=\"done\">Готово</label><input type=\"checkbox\" name=\"status\" id=\"deny\" value=\"3\"{$status['deny']}><label for=\"deny\">Отказано</label></div>");
  $catlist = "";
  foreach ($order_cat_list as $k => $v) {
    if ($data['category'] == $k) $catlist .= "<option value=\"{$k}\" selected>{$v["cat_name"]}</option>";
    else $catlist .= "<option value=\"{$k}\">{$v["cat_name"]}</option>";
  }
  $tpl->set("{catlist}", $catlist);

  $yearlist = "";
  foreach ([""] + range((int) date('Y') + 2, 1970) as $k) {
    if ($data['year'] == $k) $yearlist .= "<option value=\"{$k}\" selected>{$k}</option>";
    else $yearlist .= "<option value=\"{$k}\">{$k}</option>";
  }
  $tpl->set("{yearlist}", $yearlist);

  $tpl->set_block("'\\[add\\](.*?)\\[/add\\]'is", $action == "add" ? "\\1" : "");
  $tpl->set_block("'\\[edit\\](.*?)\\[/edit\\]'is", $action == "edit" ? "\\1" : "");
  $tpl->compile('content');
  $tpl->clear();
  $tpl->result["content"] = '<form method="post">' . $tpl->result["content"] . '<input type="hidden" name="orderdesc" value="do' . $action . '"/><input type="hidden" name="id" value="' . $data["id"] . '" /></form>';
}

if (stripos($_SERVER["REQUEST_URI"], "do=orderdesc")) {
  http_response_code(301);
  @header("Location: /{$orderDescUrl}");
  die("Redirect");
}

foreach (["title", "description", "keywords"] as $k) {
  $metatags[$k] = empty($order_config[$k]) ? "Стол заказов" : $order_config[$k];
}

$metatags["header_title"] = $metatags["title"];

$id = intval($_REQUEST['id']);
if ($id < 0) $id = 0;
$action = stripslashes($_REQUEST['action']);
unset($_GET['action'], $_GET['id']);

$orderdesc = isset($_POST["orderdesc"]) ? $_POST["orderdesc"] : "";

if ($action == "add" && $orderdesc == "") {
  orderDescRenderForm("add");
} elseif ($action == "add" && $orderdesc == "doadd") {
  $stop = "";
  $added_time = time();
  $thistime = date("Y-m-d H:i:s", $added_time);
  if ($is_logged and $order_config['add_limit'] and !$order_config['allow_guest']) {
    $todaycount = $db->super_query("SELECT count(*) as c FROM " . PREFIX . "_orderdesc WHERE autor='" . $db->safesql($member_id['name']) . "' AND date>'{$thistime}' - INTERVAL 1 DAY");
    if ($todaycount['c'] > $order_config['add_limit']) $stop .= "<li>Вы достигли лимита разрешенного количества добавленных заявок в сутки</li>";
  }
  $parse = getParserFilterInstance();
  if ($order_config['block_links']) $parse->allow_url = false;
  $descr = $db->safesql($parse->BB_Parse($parse->process($_POST['descr']), false));
  if ($order_config['block_links'] and stripos($descr, "http://") !== false) $stop .= "<li>В описании запрещено писать ссылки</li>";
  if (!$_POST['title'] and $_POST['orig_title']) {
    $_POST['title'] = $_POST['orig_title'];
    unset($_POST['orig_title']);
  }
  $title = $db->safesql($parse->process(trim(strip_tags($_POST['title']))));
  if ($order_config['block_links'] and stripos($title, "http://") !== false) $stop .= "<li>В заголовке запрещено писать ссылки</li>";
  if (dle_strlen($title, $config['charset']) < $order_config['min_title_length']) $stop .= "<li>Вы ввели слишком короткое название</li>";
  $category = intval($_POST['category']);
  if (!$order_cat_list[$category]) $stop .= "<li>Вы выбрали не существующую категорию</li>";
  if (!$is_logged and !$order_config['allow_guest']) $stop .= "<li>Оставлять заявки могут только авторизованные пользователи</li>";
  $orig_title = $db->safesql($parse->process(trim(strip_tags($_POST['orig_title']))));
  if ($order_config['block_links'] and stripos($orig_title, "http://") !== false) $stop .= "<li>В оригинальном названии запрещено писать ссылки</li>";
  if (!$stop) {
    $year = intval($_POST['year']);
    $autor = $db->safesql($member_id['name']);
    $db->query("INSERT INTO " . PREFIX . "_orderdesc (title,orig_title,descr,category,autor,date,year) VALUES ('{$title}','{$orig_title}','{$descr}','{$category}','{$autor}','{$thistime}','{$year}')");
    http_response_code(301);
    @header("Location: /{$orderDescUrl}");
    die("Redirect");
  } else msgbox("Проблемка", "<ul>{$stop}</ul><br /><a href=\"javascript:history.go(-1)\">Назад</a>");
} elseif ($action == 'del' and $id) {
  if ($is_logged and $user_group[$member_id['user_group']]['allow_all_edit']) {
    $db->query("DELETE FROM " . PREFIX . "_orderdesc WHERE id={$id}");
    msgbox("Готово!", "Выбранная вами заявка успешно удалена<br /><a href=\"/{$orderDescUrl}\">Назад</a>");
  } else msgbox("Запрещено", "Вам запрещен доступ на эту страницу<br /><a href=\"javascript:history.go(-1)\">Назад</a>");
} elseif ($action == "edit" && $orderdesc == 'doedit' and $id) {
  if ($is_logged and $user_group[$member_id['user_group']]['allow_all_edit']) {
    $row = $db->super_query("SELECT * FROM " . PREFIX . "_orderdesc WHERE id={$id}");
    if ($row['id']) {
      $stop = "";
      $parse = getParserFilterInstance();
      $descr = $db->safesql($parse->BB_Parse($parse->process($_POST['descr']), false));
      $title = $db->safesql($parse->process(trim(strip_tags($_POST['title']))));
      if (dle_strlen($title, $config['charset']) < $order_config['min_title_length']) $stop .= "<li>Вы ввели слишком короткое название</li>";
      $category = intval($_POST['category']);
      if (!$order_cat_list[$category]) $stop .= "<li>Вы выбрали не существующую категорию</li>";
      if ($_POST['status'] < 0 or $_POST['status'] > 4) $stop .= "<li>Вы выбрали не существующий статус</li>";
      if (!$stop) {
        $orig_title = $db->safesql($parse->process(trim(strip_tags($_POST['orig_title']))));
        $link = $db->safesql($parse->process(trim(strip_tags($_POST['link']))));
        $autor = $db->safesql($parse->process(trim(strip_tags($_POST['autor']))));
        $year = intval($_POST['year']);
        $starr = array(0 => 'wait', 1 => 'work', 2 => 'done', 3 => 'deny');
        $status = $starr[intval($_POST['status'])];
        if ($status != $row['status'] and $autor) {
          $user = $db->super_query("SELECT user_id,email FROM " . USERPREFIX . "_users WHERE name='{$autor}'");
          $subj = "Изменен статус вашей заявки";
          $titles = stripslashes($title);
          if ($status == 'work') $sts = "Мы занялись поиском вашей заявки, в ближашее время она будет выполнена";
          elseif ($status == 'done') $sts = "Ваша заявка выполнена, можете скачать по ссылке: <a href=\"{$link}\" target=\"_blank\">{$link}</a>";
          elseif ($status == 'deny') $sts = "Ваша заявка отклонена";
          else $sts = "Ваша заявка перенесена в ожидающие";
          if ($comment) $sts .= "\n\nКомментарий: {$comment}";
          if ($user['email'] and $order_config['inform_email']) {
            include_once ENGINE_DIR . '/classes/mail.class.php';
            $mail = new dle_mail($config, true);
            $text = <<<HTML
Здравствуйте, {$autor}!<br/>
<br/>
На сайте {$config['http_home_url']} вы оставляли заявку:<br/>
{$titles}<br/>
<br/>
{$sts}<br/>
<br/>
С уважением,<br/>
Администрация сайта
HTML;
            $mail->send($user['email'], $subj, $text);
          }
          if ($order_config['inform_pm']) {
            $text = <<<HTML
Информируем вас о статусе вашей заявки:<br/>
{$titles}<br/><br/>
{$sts}<br/><br/>
С уважением,<br/>
Администрация сайта
HTML;
            $db->query("INSERT INTO " . USERPREFIX . "_pm (subj, text, user, user_from, date, pm_read, folder) values ('{$subj}', '$text', '{$user['user_id']}', 'admin', '{$_TIME}', '0', 'inbox')");
            $db->query("UPDATE " . USERPREFIX . "_users SET pm_all=pm_all+1, pm_unread=pm_unread+1 WHERE user_id='{$user['user_id']}'");
          }
        }
        $date = date("Y-m-d H:i:s", strtotime($_POST['date']));
        $comment = $db->safesql($parse->process(trim(strip_tags($_POST['comment']))));
        $db->query("UPDATE " . PREFIX . "_orderdesc set title='{$title}',orig_title='{$orig_title}',link='{$link}',descr='{$descr}',category='{$category}',autor='{$autor}',date='{$date}',year='{$year}',status='{$status}',comment='{$comment}' WHERE id={$id}");
        msgbox("Готово!", "Изменения в заказе успешно сохранены<br /><a href=\"/{$orderDescUrl}/edit/{$id}\">Продолжить редактирование</a><br /><a href=\"/{$orderDescUrl}\">На главную</a>");
      } else msgbox("Проблемка", "<ul>{$stop}</ul><br /><a href=\"javascript:history.go(-1)\">Назад</a>");
    } else msgbox("Ошибка", "Выбранный заказ не найден или удален<br /><a href=\"javascript:history.go(-1)\">Назад</a>");
  } else msgbox("Запрещено", "Вам запрещен доступ на эту страницу<br /><a href=\"javascript:history.go(-1)\">Назад</a>");
} elseif ($action == 'edit' and $id) {
  if ($is_logged and $user_group[$member_id['user_group']]['allow_all_edit']) {
    $row = $db->super_query("SELECT * FROM " . PREFIX . "_orderdesc WHERE id={$id}");
    if ($row['id']) {
      orderDescRenderForm("edit", $row);
    } else msgbox("Ошибка", "Выбранный заказ не найден или удален<br /><a href=\"javascript:history.go(-1)\">Назад</a>");
  } else msgbox("Запрещено", "Вам запрещен доступ на эту страницу<br /><a href=\"javascript:history.go(-1)\">Назад</a>");
} else {
  $orderby = $filters = $searchqueries = "";
  $where = $url = array();
  $cstart = intval($_GET['page']);
  if (isset($_GET['search'])) {
    function strip_data($text)
    {
      $quotes = array("\x60", "\t", "\n", "\r", ",", ";", ":", "[", "]", "{", "}", "=", "*", "^", "%", "$", "<", ">");
      $goodquotes = array("-", "+", "#", "'", '"');
      $repquotes = array("\-", "\+", "\#", "\'", '\"');
      $text = stripslashes($text);
      $text = trim(strip_tags($text));
      $text = str_replace($quotes, '', $text);
      $text = str_replace($goodquotes, $repquotes, $text);
      return $text;
    }
    $story = dle_substr(strip_data(rawurldecode($_GET['search'])), 0, 50, $config['charset']);
    if (dle_strlen($story, $config['charset']) > 2) $where[] = "(title LIKE '%{$story}%' OR orig_title LIKE '%{$story}%')";
    else unset($_GET['search']);
  } else $story = "";
  unset($_GET['do'], $_GET['page']);
  if (count($_GET)) {
    foreach ($_GET as $k => $v) $url[$k] = "{$k}={$v}";
    foreach ($url as $k => $v) {
      if ($k == 'do') continue;
      $turl = $url;
      unset($turl[$k]);
      $v = explode("=", $v);
      $v = end($v);
      $tsort = "<i class=\"orderdesc-filter\"></i>";
      if ($k == 'search') {
        $tsort = "<i class=\"orderdesc-find\"></i>";
      } elseif ($k == 'sort') {
        if ($v == 'title') $orderby = $v . " ASC, ";
        elseif ($v == 'year' or $v == 'rating') $orderby = $v . " DESC, ";
        if ($v == 'title') $v = "Название";
        elseif ($v == 'year') $v = "Год релиза";
        elseif ($v == 'rating') $v = "Рейтинг";
        else continue;
        $tsort = "<i class=\"orderdesc-sort\"></i>";
      } elseif ($k == 'stats') {
        if (in_array($v, array('wait', 'done', 'deny', 'work'))) $where[] = "status='{$v}'";
        if ($v == 'wait') $v = "Заявки: Ожидают";
        elseif ($v == 'done') $v = "Заявки: Выполненные";
        elseif ($v == 'work') $v = "Заявки: В работе";
        elseif ($v == 'deny') $v = "Заявки: Отклоненные";
        else continue;
      } elseif ($k == 'autor') {
        if (!$v) continue;
        $where[] = "autor='" . $db->safesql($v) . "'";
        $v = "Заказчик: {$v}";
      } elseif ($k == 'year') {
        $where[] = "year='" . intval($v) . "'";
        $v = "Год релиза: {$v}";
      } elseif ($k == 'cat') {
        if ($order_cat_list[$v]) {
          $where[] = "category='" . intval($v) . "'";
          $v = "Категория: {$order_cat_list[$v]["cat_name"]}";
        } else continue;
      }
      if (count($turl)) $filters .= "<a href=\"" . $config['http_home_url'] . "{$orderDescUrl}?" . implode("&amp;", $turl) . "\">{$tsort}<u></u>{$v}</a>";
      else $filters .= "<a href=\"" . $config['http_home_url'] . "{$orderDescUrl}\">{$tsort}<u></u>{$v}</a>";
    }
  }
  $orderby .= "date DESC";
  $where = implode(" AND ", $where);
  if ($where) $where = "WHERE " . $where;
  if ($cstart < 1) $cstart = 1;
  $limit = intval($order_config['limit']);
  if ($limit < 1) $limit = 10;
  $dbstart = ($cstart - 1) * $limit;
  $sql = $db->query("SELECT * FROM " . PREFIX . "_orderdesc {$where} ORDER BY {$orderby} LIMIT {$dbstart},{$limit}");
  $tpl->load_template('modules/orderdesc/orderdesc_list.tpl');
  $i = 0;
  while ($row = $db->get_row($sql)) {
    $i++;
    $tpl->set("{id}", $row['id']);
    $tpl->set("{edit-url}", "/{$orderDescUrl}/edit/{$row['id']}");
    $tpl->set("{del-url}", "/{$orderDescUrl}/delete/{$row['id']}");
    if ($row['rating'] > 0) $rateclass = "plus";
    else $rateclass = "null";
    if (in_array($member_id['user_group'], $order_config['allow2vote']))
      $tpl->set("{rating}", "<a href=\"#\" onclick=\"orderdecs_rate({$row['id']});return false;\" id=\"orderdesc-rating-{$row['id']}\" class=\"orderdesc-rating-{$rateclass}\" title=\"Поддержать\">{$row['rating']}</a>");
    else
      $tpl->set("{rating}", "<span class=\"orderdesc-rating-{$rateclass}\">{$row['rating']}</span>");
    $row['title'] = stripslashes($row['title']);
    if ($row['link']) $row['title'] = "<a href=\"{$row['link']}\">{$row['title']}</a>";
    $tpl->set("{stats}", $row['status']);
    switch ($row['status']) {
      case "done":
        $stats_title = "Заявка выполнена";
        break;
      case "deny":
        $stats_title = "Заявка отклонена";
        break;
      case "work":
        $stats_title = "Заявка в работе";
        break;
      default:
        $stats_title = "Заявка ожидает";
    }
    if ($row['comment']) $stats_title .= ". " . stripslashes($row['comment']);
    $tpl->set("{stats_title}", $stats_title);
    $tpl->set("{title}", $row['title']);
    if ($row['descr']) {
      $tpl->set("{descr}", stripslashes($row['descr']));
      $tpl->set("[descr]", "");
      $tpl->set("[/descr]", "");
    } else $tpl->set_block("#\\[descr\\].+?\\[/descr\\]#is", "");
    if ($row['orig_title']) {
      $tpl->set("{alt-title}", stripslashes($row['orig_title']));
      $tpl->set("[alt-title]", "");
      $tpl->set("[/alt-title]", "");
    } else $tpl->set_block("#\\[alt-title\\].+?\\[/alt-title\\]#is", "");
    $row['category'] = intval($row['category']);
    $row['category'] = "<a href=\"/{$orderDescUrl}?cat={$row['category']}\">{$order_cat_list[$row['category']]["cat_name"]}</a>";
    $tpl->set("{category}", $row['category']);
    if ($row['autor']) {
      $tpl->set("{autor}", "<a href=\"/{$orderDescUrl}?autor=" . urlencode($row['autor']) . "\">{$row['autor']}</a>");
      if ($config['allow_alt_url'] and $config['allow_alt_url'] != "no") $tpl->set("{autor-link}", $config['http_home_url'] . "user/" . urlencode($row['autor']) . "/");
      else $tpl->set("{autor-link}", "{$PHP_SELF}?subaction=userinfo&amp;user=" . urlencode($row['autor']));
      $tpl->set('[autor]', '');
      $tpl->set('[/autor]', '');
    } else {
      $tpl->set("{autor}", $order_config['guest']);
      $tpl->set_block("#\\[autor\\].+?\\[/autor\\]#is", "");
    }
    $row['date'] = strtotime($row['date']);
    $tpl->set("{date}", date("d.m.Y", $row['date']));
    $row['year'] = intval($row['year']);
    if ($row['year'] > 0) $tpl->set("{year}", "<a href=\"/{$orderDescUrl}?year={$row['year']}\">{$row['year']}</a>");
    else $tpl->set("{year}", "");
    if ($is_logged and $user_group[$member_id['user_group']]['allow_all_edit']) {
      $tpl->set('[edit]', '');
      $tpl->set('[/edit]', '');
    } else $tpl->set_block("#\\[edit\\].+?\\[/edit\\]#is", "");
    $tpl->compile('list');
  }
  $db->free();
  $tpl->clear();
  foreach ($url as $v) {
    $v = explode("=", $v);
    if ($v[0] != 'search') $searchqueries .= "<input type=\"hidden\" name=\"{$v[0]}\" value=\"{$v[1]}\" />";
  }
  $url = $config['http_home_url'] . "index.php?" . implode("&amp;", $url);
  $tpl->load_template('modules/orderdesc/orderdesc.tpl');
  $tpl->set("{catlist}", $catlist);
  if (!$tpl->result['list']) $tpl->result['list'] = "<tr><td colspan=\"10\" style=\"text-align:center;\">Ничего не найдено</td></tr>";
  $tpl->set('{list}', $tpl->result['list']);
  $tpl->set('{searchqueries}', $searchqueries);
  if ($filters) {
    $tpl->set('{filters}', $filters);
    $tpl->set('[filters]', '');
    $tpl->set('[/filters]', '');
  } else $tpl->set_block("#\\[filters\\](.+?)\\[/filters\\]#is", "");

  if ($i >= $limit or $dbstart > 0) {
    $count = $db->super_query("SELECT count(*) as c FROM " . PREFIX . "_orderdesc {$where}");
    $count = $count['c'];
  } else $count = 0;
  if ($count > $limit) {
    $spread = 4;
    $end_page = ceil($count / $limit);
    if ($cstart > $end_page) $cstart = $end_page;
    if ($cstart < 2) $navigation = "<span><<</span><span><</span>";
    else {
      $navigation = "<a href=\"{$url}\" title=\"В начало\"><<</a>";
      $prev = $cstart - 1;
      if ($prev > 1) $navigation .= "<a href=\"{$url}?page={$prev}\" title=\"Назад\"><</a>";
      else $navigation .= "<a href=\"{$url}\" title=\"Назад\"><</a>";
    }
    $start = $cstart - $spread;
    $end = min($cstart + $spread, $end_page);
    if ($end == $end_page - 1) $end = $end_page;
    if ($end_page <= ($spread * 2 + 1)) {
      $start = 1;
      $end = $end_page;
    } elseif ($start < 3) $start = 1;
    else $navigation .= "<b>...</b>";
    for ($i = $start; $i <= $end; $i++) {
      if ($cstart == $i) $navigation .= "<span>{$i}</span>";
      else {
        if ($i > 1) $navigation .= "<a href=\"{$url}?page={$i}\">{$i}</a>";
        else $navigation .= "<a href=\"{$url}\">{$i}</a>";
      }
    }
    if ($end_page > $cstart + $spread and $end != $end_page) $navigation .= "<b>...</b>";
    if ($cstart == $end_page) $navigation .= "<span>></span><span>>></span>";
    elseif ($cstart < $end_page) {
      $next = min($cstart + 1, $end_page);
      $navigation .= "<a href=\"{$url}?page={$next}\" title=\"Вперед\">></a><a href=\"{$url}?page={$end_page}\" title=\"В конец\">>></a>";
    }
    $tpl->set('{navigation}', $navigation);
    $tpl->set('[navigation]', '');
    $tpl->set('[/navigation]', '');
  } else $tpl->set_block("#\\[navigation\\](.+?)\\[/navigation\\]#is", "");

  if ($order_config['allow_guest'] or $is_logged) {
    $tpl->set('[guest]', '');
    $tpl->set('[/guest]', '');
    $catlist = "";
    foreach ($order_cat_list as $k => $v) $catlist .= "<option value=\"{$k}\">{$v["cat_name"]}</option>";
    $tpl->set('{catlist}', $catlist);
  } else $tpl->set_block("#\\[guest\\](.+?)\\[/guest\\]#is", "");

  $tpl->set("{add-url}", "/{$orderDescUrl}/add");

  $tpl->compile('content');
  $tpl->clear();
}
]]></replacecode>
			<enabled>1</enabled>
		</operation>
	</file>
	<file name="engine/iCooLER/OrderDesc/Services/CategoryService.php">
		<operation action="create">
			<replacecode><![CDATA[<?php

namespace iCooLER\OrderDesc\Services;

use iCooLER\OrderDesc\Classes\DB;

class CategoryService
{
  public static function byId($id)
  {
    return DB::selectOne("{}_orderdesc_category", "*", "id = {$id}");
  }

  public static function all()
  {
    $items = [];

    foreach (DB::select("{}_orderdesc_category") as $item) {
      $items[$item["cat_id"]] = $item;
    }

    return $items;
  }

  public static function add($data)
  {
    return DB::insert("{}_orderdesc_category", $data);
  }

  public static function change($id, $data)
  {
    DB::update("{}_orderdesc_category", $data, "id = {$id}");
  }
}
]]></replacecode>
			<enabled>1</enabled>
		</operation>
	</file>
	<file name="engine/iCooLER/OrderDesc/Forms/ConfigForm.php">
		<operation action="create">
			<replacecode><![CDATA[<?php

namespace iCooLER\OrderDesc\Forms;

use iCooLER\OrderDesc\Classes\Form;

class ConfigForm extends Form
{
  public function __construct()
  {
    global $user_group;
    
    foreach ([
      'title' => 'Метатег Title',
      'description' => 'Метатег Description',
      'keywords' => 'Метатег Keywords'
    ] as $name => $title) {
      $this->addField($name, $title, "text", [
        "default" => "Стол заказов"
      ]);
    }

    $this->addField("url", "URL стола заказов", "text", [
      "caption" => "Разрешено только буквы, цифры и символы - и _",
      "default" => "orderdesc"
    ]);
    $this->addField("limit", "Количество выводимых заявок на странице", "number", [
      "caption" => "",
      "default" => 10
    ]);
    $this->addField("min_title_length", "Минимальная длина названия", "number", [
      "caption" => "",
      "default" => 3
    ]);
    $this->addField("allow_guest", "Разрешить гостям оставлять заявки", "checkbox", [
      "caption" => "",
      "default" => 1
    ]);
    $this->addField("guest", "Имя гостя добавившего заявку", "text", [
      "caption" => "",
      "default" => "Гость"
    ]);
    $this->addField("add_limit", "Лимит на количество добавленных заявок в сутки на одного пользователя", "number", [
      "caption" => "",
      "default" => 5
    ]);
    $this->addField("block_links", "Запретить писать ссылки в полях", "checkbox", [
      "caption" => "",
      "default" => 1
    ]);
    $this->addField("inform_email", "Отправлять уведомление заявителю на E-Mail о смене статуса заявки", "checkbox", [
      "caption" => "",
      "default" => 1
    ]);
    $this->addField("inform_pm", "Отправлять уведомление заявителю в ЛС о смене статуса заявки", "checkbox", [
      "caption" => "",
      "default" => 1
    ]);
    $this->addField("allow2vote", "Список id групп, которым разрешено плюсовать \"рейтинг\"", "select", [
      "caption" => "",
      "default" => [1, 2, 3, 4, 5],
      "multiple" => true,
      "items" => array_reduce($user_group, function ($arr, $val) {
        $arr[$val["id"]] = "ID: {$val["id"]} — {$val["group_name"]}";
        return $arr;
      }, [])
    ]);
  }
}
]]></replacecode>
			<enabled>1</enabled>
		</operation>
	</file>
	<file name="engine/iCooLER/OrderDesc/Forms/ListForm.php">
		<operation action="create">
			<replacecode><![CDATA[<?php

namespace iCooLER\OrderDesc\Forms;

use iCooLER\OrderDesc\Classes\Form;

class ListForm extends Form
{
  public function __construct()
  {
    $this->addField("cat_name", "Название", "text", [
      "required" => true
    ]);
  }
}
]]></replacecode>
			<enabled>1</enabled>
		</operation>
	</file>
	<file name="engine/iCooLER/OrderDesc/Classes/Helpers.php">
		<operation action="create">
			<replacecode><![CDATA[<?php

namespace iCooLER\OrderDesc\Classes;

class Helpers
{
  public static function renderTemplate($template, $data)
  {
    foreach ($data as $name => $value) {
      $template = str_replace("{{$name}}", (string) $value, $template);

      if ($value) {
        $template = str_replace(["[{$name}]", "[/{$name}]"], '', $template);
        $template = preg_replace("'\\[not-{$name}\\](.*?)\\[/not-{$name}\\]'is", '', $template);
      } else {
        $template = preg_replace("'\\[{$name}\\](.*?)\\[/{$name}\\]'is", '', $template);
        $template = str_replace(["[not-{$name}]", "[/not-{$name}]"], '', $template);
      }
    }

    return $template;
  }
}
]]></replacecode>
			<enabled>1</enabled>
		</operation>
	</file>
	<file name="engine/iCooLER/OrderDesc/Classes/OrderDesc.php">
		<operation action="create">
			<replacecode><![CDATA[<?php

namespace iCooLER\OrderDesc\Classes;

use iCooLER\OrderDesc\Services\CategoryService;

class OrderDesc
{
  protected static $config;
  protected static $categories;

  public static function config()
  {
    if (!is_array(self::$config)) {
      self::$config = @include ENGINE_DIR . '/data/OrderDesc.config.php';

      if (!is_array(self::$config)) {
        self::$config = [];
      }
    }

    return self::$config;
  }

  public static function categories()
  {
    if (!is_null(self::$categories)) {
      return self::$categories;
    }

    $items = get_vars("orderdesc_category");

    if (is_array($items)) {
      return $items;
    }

    $items = CategoryService::all();

    set_vars("orderdesc_category", $items);

    self::$categories = $items;

    return $items;
  }
}
]]></replacecode>
			<enabled>1</enabled>
		</operation>
	</file>
	<file name="engine/iCooLER/OrderDesc/Classes/Admin.php">
		<operation action="create">
			<replacecode><![CDATA[<?php

namespace iCooLER\OrderDesc\Classes;

class Admin
{
  public static function url($endpoint, $args = [])
  {
    global $mod;
    return "?" . http_build_query([
      "mod" => $mod,
      "endpoint" => $endpoint,
    ] + $args);
  }

  public static function render($templateName, $params = array())
  {
    $templatePath = \DLEPlugins::Check(ENGINE_DIR . "/iCooLER/OrderDesc/Views/" . $templateName . ".php");
    extract($params);
    ob_start();
    echoheader("OrderDesc", "Стол заказов");
    self::echoMessages();
    require($templatePath);
    echofooter();
    $output = ob_get_contents();
    ob_end_clean();
    return $output;
  }

  public static function echoMessages()
  {
    if (!isset($_SESSION["orderdesc_admin_message"])) {
      return;
    }

    foreach ($_SESSION["orderdesc_admin_message"] as $item) {
      echo <<<HTML
<div class="alert alert-{$item["type"]}">
  <strong>{$item["title"]}</strong> {$item["text"]}
</div>
HTML;
    }

    unset($_SESSION["orderdesc_admin_message"]);
  }

  public static function addMessage($type, $title, $text)
  {
    if (!is_array($_SESSION["orderdesc_admin_message"])) {
      $_SESSION["orderdesc_admin_message"] = [];
    }

    $_SESSION["orderdesc_admin_message"][] = [
      "type" => $type,
      "title" => $title,
      "text" => $text
    ];
  }
}
]]></replacecode>
			<enabled>1</enabled>
		</operation>
	</file>
	<file name="engine/iCooLER/OrderDesc/Classes/DB.php">
		<operation action="create">
			<replacecode><![CDATA[<?php

namespace iCooLER\OrderDesc\Classes;

class DB
{
  public static function execute($query)
  {
    global $db;

    return $db->query($query);
  }

  public static function insertId()
  {
    global $db;

    return $db->insert_id();
  }

  // Select data
  public static function select($table, $columns = "*", $where = null, $multi = true)
  {
    global $db;
    $table = str_replace("{}", PREFIX, $table);
    $sql = "SELECT $columns FROM $table";
    if ($where) {
      $sql .= " WHERE $where";
    }
    $data = $db->super_query($sql, $multi);
    return $data;
  }

  // Select data
  public static function selectOne($table, $columns = "*", $where = null)
  {
    return self::select($table, $columns, $where, false);
  }

  // Insert data
  public static function insert($table, $data)
  {
    $table = str_replace("{}", PREFIX, $table);
    $columns = implode(", ", array_keys($data));
    $values = implode("', '", array_values($data));
    $sql = "INSERT INTO $table ($columns) VALUES ('$values')";
    self::execute($sql);
    return self::insertId();
  }

  // Update data
  public static function update($table, $data, $where = null)
  {
    $table = str_replace("{}", PREFIX, $table);
    $set = "";
    foreach ($data as $column => $value) {
      $set .= "$column = '$value', ";
    }
    $set = rtrim($set, ", ");
    $sql = "UPDATE $table SET $set";
    if ($where) {
      $sql .= " WHERE $where";
    }
    self::execute($sql);
  }

  // Delete data
  public static function delete($table, $where = null)
  {
    $table = str_replace("{}", PREFIX, $table);
    $sql = "DELETE FROM $table";
    if ($where) {
      $sql .= " WHERE $where";
    }
    self::execute($sql);
  }

  // Count data
  public static function count($table, $where = null)
  {
    $table = str_replace("{}", PREFIX, $table);
    $sql = "SELECT COUNT(*) as count FROM $table";
    if ($where) {
      $sql .= " WHERE $where";
    }
    $result = self::execute($sql);
    $count = $result['count'];
    return $count;
  }
}
]]></replacecode>
			<enabled>1</enabled>
		</operation>
	</file>
	<file name="engine/iCooLER/OrderDesc/Classes/Form.php">
		<operation action="create">
			<replacecode><![CDATA[<?php

namespace iCooLER\OrderDesc\Classes;

class Form
{
  private $fields = array();
  private $errors = array();

  public function __get($name)
  {
    return $this->getValue($name);
  }

  public function getValue($name)
  {
    return ($this->fields[$name]["flag"] ? $this->fields[$name]["value"] : ($this->fields[$name]["params"]["default"] ? $this->fields[$name]["params"]["default"] : null));
  }

  public function getData()
  {
    $data = [];

    foreach ($this->fields as $name => $field) {
      $data[$name] = $this->getValue($name);
    }

    return $data;
  }

  public function setData($data = [], $isSended = false)
  {
    foreach ($this->fields as $name => &$field) {
      if (isset($data[$name])) {
        $field["value"] = $data[$name];
        $field["flag"] = true;
      } elseif ($isSended) {
        $field["value"] = false;
        $field["flag"] = true;
      }
    }
    return $this;
  }

  public function addField($name, $label, $type, $params = [])
  {
    $this->fields[$name] = array(
      'label' => $label,
      'type' => $type,
      'params' => $params,
      'value' => null,
      "flag" => false
    );
  }

  public function validate()
  {
    foreach ($this->fields as $name => $field) {
      if (isset($field['params']['required']) && $field['params']['required'] && empty($field['value'])) {
        $this->errors[$name] = "{$field['label']} обязательно";
      }
    }
    return empty($this->errors);
  }

  public function render()
  {
    $output = '<div class="form-horizontal">';
    foreach ($this->fields as $name => $field) {
      $value = $this->getValue($name);
      $caption = isset($field['params']['caption']) ? "<div>{$field['params']['caption']}</div>" : '';
      $output .= '<div class="form-group';
      if (isset($this->errors[$name])) {
        $output .= ' has-error';
      }
      $output .= '">';
      if ($field["type"] == "text" || $field["type"] == "number") {
        $output .= '<label class="control-label col-sm-4"><b>' . $field['label'] . "</b>" . $caption .  '</label>';
        $output .= '<div class="col-sm-8">';
        $output .= '<input type="' . $field['type'] . '" class="form-control" name="' . $name . '"';
        if ($field["type"] == "number") {
          $value = (float) $value;
        }
        $output .= ' value="' . htmlspecialchars($value) . '"';
        $output .= '>';
      } elseif ($field["type"] == "textarea") {
        $output .= "<div class=\"col-sm-12\">";
        $output .= '<label class="control-label"><b>' . $field['label'] . "</b>" . $caption .  '</label>';
        $output .= '<textarea class="form-control" style="height: 200px" name="' . $name . '">';
        if (isset($value)) {
          $output .= $value;
        }
        $output .= '</textarea>';
      } elseif ($field["type"] == "checkbox") {
        $output .= '<label class="control-label col-sm-4"><b>' . $field['label'] . "</b>" . $caption .  '</label>';
        $output .= '<div class="col-sm-8">';
        $output .= '<input type="' . $field['type'] . '" class="icheck" name="' . $name . '" value="1"';
        if ($value) {
          $output .= " checked";
        }
        $output .= '>';
      } elseif ($field["type"] == "select") {
        $output .= '<label class="control-label col-sm-4"><b>' . $field['label'] . "</b>" . $caption .  '</label>';
        $output .= '<div class="col-sm-8">';
        $output .= '<select class="uniform"';
        if (isset($field["params"]["multiple"]) && $field["params"]["multiple"]) {
          $output .= ' multiple name="' . $name . '[]"';
        } else {
          $output .= ' name="' . $name . '"';
        }
        $output .= '>';
        if (!is_array($value)) {
          $value = [$value];
        }
        foreach ($field["params"]["items"] as $val => $key) {
          $selected = in_array($val, $value) ? " selected" : "";
          $output .= "<option value='{$val}'{$selected}>{$key}</option>";
        }
        $output .= '</select>';
      }
      if (isset($this->errors[$name])) {
        $output .= '<p class="help-block">' . $this->errors[$name] . '</p>';
      }
      $output .= '</div>';
      $output .= '</div>';
    }
    $output .= '</div>';
    return $output;
  }
}
]]></replacecode>
			<enabled>1</enabled>
		</operation>
	</file>
	<file name="engine/iCooLER/OrderDesc/Classes/Response.php">
		<operation action="create">
			<replacecode><![CDATA[<?php

namespace iCooLER\OrderDesc\Classes;

class Response
{
  private $statusCode;
  private $headers;
  private $body;

  public function __construct($statusCode, $headers, $body)
  {
    $this->statusCode = $statusCode;
    $this->headers = $headers;
    $this->body = $body;
  }

  public function send()
  {
    http_response_code($this->statusCode);
    foreach ($this->headers as $name => $value) {
      header("$name: $value");
    }
    echo $this->body;
  }

  public static function json($data, $statusCode = 200, $headers = array())
  {
    $headers["Content-Type"] = "application/json";
    $body = json_encode($data);
    return new self($statusCode, $headers, $body);
  }

  public static function text($text, $statusCode = 200, $headers = array())
  {
    $headers["Content-Type"] = "text/plain";
    return new self($statusCode, $headers, $text);
  }

  public static function html($text, $statusCode = 200, $headers = array())
  {
    $headers["Content-Type"] = "text/html";
    return new self($statusCode, $headers, $text);
  }

  public static function image($imagePath, $statusCode = 200, $headers = array())
  {
    $imageType = mime_content_type($imagePath);
    $headers["Content-Type"] = $imageType;
    $body = file_get_contents($imagePath);
    return new self($statusCode, $headers, $body);
  }

  public static function file($filePath, $statusCode = 200, $headers = array())
  {
    $fileType = mime_content_type($filePath);
    $headers["Content-Type"] = $fileType;
    $headers["Content-Disposition"] = "attachment; filename=\"" . basename($filePath) . "\"";
    $body = file_get_contents($filePath);
    return new self($statusCode, $headers, $body);
  }

  public static function redirect($url, $statusCode = 302, $headers = array())
  {
    $headers["Location"] = $url;
    $body = "";
    return new self($statusCode, $headers, $body);
  }
}
]]></replacecode>
			<enabled>1</enabled>
		</operation>
	</file>
	<file name="engine/iCooLER/OrderDesc/Classes/Router.php">
		<operation action="create">
			<replacecode><![CDATA[<?php

namespace iCooLER\OrderDesc\Classes;

class Router
{
  private $routes = array();

  public function addRoute($method, $path, $handler)
  {
    $this->routes[] = [
      "method" => $method,
      "path" => $path,
      "handler" => $handler
    ];
  }

  public function route($method, $path)
  {
    foreach ($this->routes as $item) {
      if (is_array($item["method"])) {
        if (!in_array($method, $item["method"])) {
          continue;
        }
      } elseif ($method != $item["method"]) {
        continue;
      }
      // Check if the route path and request path match
      if ($this->matchRoutePath($item["path"], $path, $args)) {
        // Call the handler with the typed arguments
        try {
          $response = $this->callHandler($item["handler"], $args);
          if ($response instanceof Response) {
            $response->send();
          } else {
            throw new \Exception("Handler not return response");
          }
        } catch (\Throwable $th) {
          die($th->getMessage());
        }
        exit;
      }
    }
  }

  private function matchRoutePath($route_path, $request_path, &$args)
  {
    // Split the path into segments
    $route_segments = explode("/", $route_path);
    $request_segments = explode("/", $request_path);

    // Check if the number of segments match
    if (count($route_segments) != count($request_segments)) {
      return false;
    }

    // Match each segment
    $args = array();
    for ($i = 0; $i < count($route_segments); $i++) {
      $route_segment = $route_segments[$i];
      $request_segment = $request_segments[$i];

      // Check if the segment is a typed argument
      if (preg_match("/{([a-z]+):([a-zA-Z0-9_]+)}/", $route_segment, $matches)) {
        $type = $matches[1];
        $name = $matches[2];

        // Match the argument based on its type
        switch ($type) {
          case "int":
            if (!is_numeric($request_segment)) {
              return false;
            }
            $args[$name] = (int)$request_segment;
            break;
          case "string":
            $args[$name] = $request_segment;
            break;
          default:
            return false;
        }
      } else {
        // Check if the segments match
        if ($route_segment != $request_segment) {
          return false;
        }
      }
    }

    // All segments match
    return true;
  }

  private function callHandler($handler, $args)
  {
    // If the handler is a string, assume it's a function name
    if (is_string($handler) || is_callable($handler)) {
      $response = call_user_func_array($handler, $args);
    } else {
      // Assume it's an array [object, method]
      $object = $handler[0];
      $method = $handler[1];
      $response = call_user_func_array(array($object, $method), $args);
    }
    return $response;
  }
}
]]></replacecode>
			<enabled>1</enabled>
		</operation>
	</file>
	<file name="engine/iCooLER/OrderDesc/Views/categories.php">
		<operation action="create">
			<replacecode><![CDATA[<?php defined('DATALIFEENGINE') || die('Access denied!');

use iCooLER\OrderDesc\Classes\Admin;

?>

<div class="panel panel-default">
  <div class="panel-heading">
    Список категорий
  </div>
  <?php if (empty($items)) : ?>
    <div class="panel-body text-center mt-4 mb-4">Категорий нет</div>
  <?php else : ?>
    <table class="table table-xs">
      <thead>
        <tr>
          <th>ID</th>
          <th>Название</th>
          <th width="180px"></th>
        </tr>
      </thead>
      <tbody>
        <?php foreach ($items as $index => $item) : ?>
          <tr>
            <td><?= $item["cat_id"] ?></td>
            <td><?= $item["cat_name"] ?></td>
            <td>
              <a href="<?= Admin::url("/categories/edit/" . $item["cat_id"]) ?>">Изменить</a>
            </td>
          </tr>
        <?php endforeach; ?>
      </tbody>
    </table>
  <?php endif; ?>
  <div class="panel-footer">
    <a href="<?= Admin::url("/categories/create") ?>" class="btn btn-sm bg-teal">Добавить категорию</a>
  </div>
</div>]]></replacecode>
			<enabled>1</enabled>
		</operation>
	</file>
	<file name="engine/iCooLER/OrderDesc/Views/index.php">
		<operation action="create">
			<replacecode><![CDATA[<div class="panel panel-default">
  <div class="panel-heading">
    Список разделов
  </div>
  <div class="list-bordered">
    <div class="row box-section">
      <?php foreach ($items as $index => $item) : ?>
        <div class="col-sm-6 media-list media-list-linked">
          <a class="media-link" href="<?= $item["url"] ?>">
            <div class="media-left"><img src="engine/skins/images/<?= $item["icon"] ?>.png" class="img-lg section_icon"></div>
            <div class="media-body">
              <h6 class="media-heading  text-semibold"><?= $item["label"] ?></h6>
              <span class="text-muted"><?= $item["caption"] ?></span>
            </div>
          </a>
        </div>
      <?php endforeach; ?>
    </div>
  </div>
</div>]]></replacecode>
			<enabled>1</enabled>
		</operation>
	</file>
	<file name="engine/iCooLER/OrderDesc/Views/form.php">
		<operation action="create">
			<replacecode><![CDATA[<form method="POST">
  <div class="panel panel-default">
    <div class="panel-heading"><?= $title ?></div>
    <div class="panel-body">
      <?= $form->render() ?>
    </div>
    <div class="panel-footer">
      <button type="submit" class="btn btn-sm bg-teal"><?= $button ?></button>
    </div>
  </div>
</form>]]></replacecode>
			<enabled>1</enabled>
		</operation>
	</file>
</dleplugin>